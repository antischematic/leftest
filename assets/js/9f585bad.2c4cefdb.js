"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[509],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(r),m=a,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8988:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const i={sidebar_position:2},o="Features",s={unversionedId:"guide/features",id:"guide/features",title:"Features",description:"This API is stable.",source:"@site/docs/guide/features.md",sourceDirName:"guide",slug:"/guide/features",permalink:"/leftest/docs/guide/features",draft:!1,editUrl:"https://github.com/antischematic/leftest/tree/main/packages/create-docusaurus/templates/shared/docs/guide/features.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"How to write tests",permalink:"/leftest/docs/guide/how-to-write-tests"},next:{title:"Steps",permalink:"/leftest/docs/guide/steps"}},l={},c=[],p={toc:c},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"features"},"Features"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"This API is stable.")),(0,a.kt)("p",null,"Start with the feature file. This describes what the features are, and various scenarios for interacting with each feature. Mark features as ",(0,a.kt)("inlineCode",{parentName:"p"},"todo")," until you are ready to implement them."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { createTestSuite, feature, scenario, todo } from \"@antischematic/leftest\"\nimport steps from \"./steps\"\n\nconst { given, when, then, examples } = createTestSuite(steps, { // <7> \n   typeCheck: false // <8>\n})\n\n~todo\nfeature('Guess the word', () => { // <1>\n   scenario('Maker starts a game', () => { // <2>\n      when('the Maker starts a game') // <3>\n      then('the Maker waits for a Breaker to join') // <3>\n   })\n})\n\n~todo // <9>\nfeature('Cucumbers', () => { // <1>\n   background(() => { // <6>\n      given('I login with <username> and <password>')\n   })\n   \n   scenario('eating', () => { // <2>\n      given('there are <start> cucumbers') // <4>\n      when('I eat <eat> cucumbers') // <4>\n      then('I should have <left> cucumbers') // <4>\n\n      examples([ // <5>\n         { username: 'Bob', password: 'pass', start: 12, eat: 5, left: 7 },\n         { username: 'Bob', password: 'pass', start: 20, eat: 5, left: 15 },\n      ])\n   })\n})\n")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Tests are organised by ",(0,a.kt)("inlineCode",{parentName:"li"},"feature")),(0,a.kt)("li",{parentName:"ol"},"Each feature has at least one ",(0,a.kt)("inlineCode",{parentName:"li"},"scenario"),"."),(0,a.kt)("li",{parentName:"ol"},"Scenarios are described using steps, such as ",(0,a.kt)("inlineCode",{parentName:"li"},"given"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"when")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"then"),"."),(0,a.kt)("li",{parentName:"ol"},"Steps can be parameterised to test different states."),(0,a.kt)("li",{parentName:"ol"},"Scenarios can be repeated using ",(0,a.kt)("inlineCode",{parentName:"li"},"examples")," to iterate over a list of data for a set of parameterised steps."),(0,a.kt)("li",{parentName:"ol"},"Common steps can be repeated for every scenario using ",(0,a.kt)("inlineCode",{parentName:"li"},"background"),"."),(0,a.kt)("li",{parentName:"ol"},"The test suite is created based on the steps that are provided."),(0,a.kt)("li",{parentName:"ol"},"Once you have finished implementing the feature, remove this to enable type checking."),(0,a.kt)("li",{parentName:"ol"},"Remove the ",(0,a.kt)("inlineCode",{parentName:"li"},"todo")," tag to enable the test.")))}d.isMDXComponent=!0}}]);