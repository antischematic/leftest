"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/leftest/docs/intro","docId":"intro"},{"type":"category","label":"Guide","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"How to write tests","href":"/leftest/docs/guide/how-to-write-tests","docId":"guide/how-to-write-tests"},{"type":"link","label":"Features","href":"/leftest/docs/guide/features","docId":"guide/features"},{"type":"link","label":"Steps","href":"/leftest/docs/guide/steps","docId":"guide/steps"},{"type":"link","label":"Context","href":"/leftest/docs/guide/context","docId":"guide/context"},{"type":"link","label":"Hooks","href":"/leftest/docs/guide/hooks","docId":"guide/hooks"},{"type":"link","label":"Tags","href":"/leftest/docs/guide/tags","docId":"guide/tags"}]},{"type":"category","label":"Adapters","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Cypress","href":"/leftest/docs/adapters/cypress","docId":"adapters/cypress"},{"type":"link","label":"Playwright","href":"/leftest/docs/adapters/playwright","docId":"adapters/playwright"},{"type":"link","label":"Vitest","href":"/leftest/docs/adapters/vitest","docId":"adapters/vitest"},{"type":"link","label":"Write a Custom Adapter","href":"/leftest/docs/adapters/custom","docId":"adapters/custom"}]},{"type":"link","label":"Comparison with Cucumber","href":"/leftest/docs/cucumber","docId":"cucumber"}]},"docs":{"adapters/custom":{"id":"adapters/custom","title":"Write a Custom Adapter","description":"This API is experimental.","sidebar":"tutorialSidebar"},"adapters/cypress":{"id":"adapters/cypress","title":"Cypress","description":"This adapter is stable.","sidebar":"tutorialSidebar"},"adapters/playwright":{"id":"adapters/playwright","title":"Playwright","description":"This adapter is experimental.","sidebar":"tutorialSidebar"},"adapters/vitest":{"id":"adapters/vitest","title":"Vitest","description":"This adapter is experimental.","sidebar":"tutorialSidebar"},"cucumber":{"id":"cucumber","title":"Comparison with Cucumber","description":"Leftest can be thought of as a lightweight TypeScript interpretation of Gherkin syntax and Cucumber. Instead of IDE plugins it relies on type checking to get a reasonable DX with autocompletion and type checking of parameterised steps.","sidebar":"tutorialSidebar"},"guide/context":{"id":"guide/context","title":"Context","description":"This API is experimental.","sidebar":"tutorialSidebar"},"guide/features":{"id":"guide/features","title":"Features","description":"This API is stable.","sidebar":"tutorialSidebar"},"guide/hooks":{"id":"guide/hooks","title":"Hooks","description":"This API is stable.","sidebar":"tutorialSidebar"},"guide/how-to-write-tests":{"id":"guide/how-to-write-tests","title":"How to write tests","description":"Leftest encourages the practice of Shift-Left testing. Tests are written before implementing each feature. Tests written this way serve as the starting point for working on a new feature by clearly defining the acceptance criteria.","sidebar":"tutorialSidebar"},"guide/steps":{"id":"guide/steps","title":"Steps","description":"This API is stable.","sidebar":"tutorialSidebar"},"guide/tags":{"id":"guide/tags","title":"Tags","description":"This API is stable.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction","description":"Leftest is a framework agnostic testing library for writing behaviour-driven tests with user-oriented language.","sidebar":"tutorialSidebar"}}}')}}]);