"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[769],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),g=r,h=u["".concat(l,".").concat(g)]||u[g]||d[g]||o;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=g;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},2259:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:5},s="Tags",i={unversionedId:"guide/tags",id:"guide/tags",title:"Tags",description:"This API is stable.",source:"@site/docs/guide/tags.md",sourceDirName:"guide",slug:"/guide/tags",permalink:"/leftest/docs/guide/tags",draft:!1,editUrl:"https://github.com/antischematic/leftest/tree/main/packages/create-docusaurus/templates/shared/docs/guide/tags.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Hooks",permalink:"/leftest/docs/guide/hooks"},next:{title:"Cypress",permalink:"/leftest/docs/adapters/cypress"}},l={},c=[{value:"Built-in tags",id:"built-in-tags",level:2},{value:"Tagged hooks",id:"tagged-hooks",level:2},{value:"Tag matchers",id:"tag-matchers",level:3},{value:"Include or exclude tests",id:"include-or-exclude-tests",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tags"},"Tags"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This API is stable.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Only features, scenarios and examples can be tagged. Steps cannot be tagged. An error is thrown if a tag is used incorrectly.")),(0,r.kt)("p",null,"Tags allow you to control when hooks are applies, as well as which scenarios should be included or excluded in a test run."),(0,r.kt)("h2",{id:"built-in-tags"},"Built-in tags"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"todo")," skips the tagged scenario so that it is not included in the test run. Use this when writing new specs."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"skip")," does the same thing as ",(0,r.kt)("inlineCode",{parentName:"p"},"todo"),". Use this to temporarily disable a test."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"only")," skips all features and scenarios that are not tagged with ",(0,r.kt)("inlineCode",{parentName:"p"},"only"),". Use this to isolate a test when building or a debugging a feature."),(0,r.kt)("h2",{id:"tagged-hooks"},"Tagged hooks"),(0,r.kt)("p",null,"Tags can be used to filter the scope of scenario and step hooks. For example, given the following hook:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { beforeScenario, getTags, eq } from '@antischematic/leftest'\n\nconst { matchScreenshot } = getTags()\n\nbeforeScenario(eq(matchScreenshot), () => {\n   // screenshot implementation\n})\n")),(0,r.kt)("p",null,"Now the hook will only run on scenarios tagged with ",(0,r.kt)("inlineCode",{parentName:"p"},"matchScreenshot"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { getTags, feature, scenario } from '@antischematic/leftest'\nimport { createTestSuite } from \"./core\"\nimport steps from \"./steps\"\n\nconst { when, then } = createTestSuite(steps)\nconst { matchScreenshot } = getTags()\n\n~matchScreenshot\nfeature('Guess the word', () => {\n   scenario('Maker starts a game', () => {\n      when('the Maker starts a game')\n      then('the Maker waits for a Breaker to join')\n   })\n})\n\nfeature('Cucumbers', () => {\n...\n})\n")),(0,r.kt)("h3",{id:"tag-matchers"},"Tag matchers"),(0,r.kt)("p",null,"Complex expressions for tagged hooks are supported using the following tag matchers:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"eq")," Matches when the scenario is tagged with the given tag\n",(0,r.kt)("inlineCode",{parentName:"p"},"not")," Matches when the scenario is not tagged with the given tag\n",(0,r.kt)("inlineCode",{parentName:"p"},"and")," Matches when both sub-expressions are matched\n",(0,r.kt)("inlineCode",{parentName:"p"},"or")," Matches when either sub-expression is matched"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { eq, not, and, beforeScenario, getTags } from '@antischematic/leftest'\n\nconst { mobile, iphone } = getTags()\n\nbeforeScenario(and(eq(mobile), not(iphone)), () => {\n   console.log('only mobiles that are not iphone')\n})\n")),(0,r.kt)("h2",{id:"include-or-exclude-tests"},"Include or exclude tests"),(0,r.kt)("p",null,"This feature is test framework specific, refer to the documentation for each adapter."))}d.isMDXComponent=!0}}]);