"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[404],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>w});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(r),d=o,w=p["".concat(c,".").concat(d)]||p[d]||f[d]||i;return r?n.createElement(w,a(a({ref:t},l),{},{components:r})):n.createElement(w,a({ref:t},l))}));function w(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3326:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var n=r(7462),o=(r(7294),r(3905));const i={sidebar_position:1},a="How to write tests",s={unversionedId:"guide/how-to-write-tests",id:"guide/how-to-write-tests",title:"How to write tests",description:"Leftest encourages the practice of Shift-Left testing. Tests are written before implementing each feature. Tests written this way serve as the starting point for working on a new feature by clearly defining the acceptance criteria.",source:"@site/docs/guide/how-to-write-tests.md",sourceDirName:"guide",slug:"/guide/how-to-write-tests",permalink:"/leftest/docs/guide/how-to-write-tests",draft:!1,editUrl:"https://github.com/antischematic/leftest/tree/main/packages/create-docusaurus/templates/shared/docs/guide/how-to-write-tests.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/leftest/docs/intro"},next:{title:"Features",permalink:"/leftest/docs/guide/features"}},c={},u=[],l={toc:u},p="wrapper";function f(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-to-write-tests"},"How to write tests"),(0,o.kt)("p",null,"Leftest encourages the practice of Shift-Left testing. Tests are written before implementing each feature. Tests written this way serve as the starting point for working on a new feature by clearly defining the acceptance criteria."))}f.isMDXComponent=!0}}]);