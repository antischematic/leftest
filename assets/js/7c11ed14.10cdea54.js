"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[391],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(r),m=a,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return r?n.createElement(f,o(o({ref:t},c),{},{components:r})):n.createElement(f,o({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},576:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const i={sidebar_position:2},o="Playwright",l={unversionedId:"adapters/playwright",id:"adapters/playwright",title:"Playwright",description:"This adapter is experimental.",source:"@site/docs/adapters/playwright.md",sourceDirName:"adapters",slug:"/adapters/playwright",permalink:"/leftest/docs/adapters/playwright",draft:!1,editUrl:"https://github.com/antischematic/leftest/tree/main/packages/create-docusaurus/templates/shared/docs/adapters/playwright.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Cypress",permalink:"/leftest/docs/adapters/cypress"},next:{title:"Vitest",permalink:"/leftest/docs/adapters/vitest"}},s={},p=[{value:"Setup",id:"setup",level:2},{value:"Include or exclude tests",id:"include-or-exclude-tests",level:2},{value:"Extending Playwright test context",id:"extending-playwright-test-context",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"playwright"},"Playwright"),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"This adapter is experimental.")),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("p",null,"Install Leftest with the Playwright adapter."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm add @antischematic/leftest-playwright\n")),(0,a.kt)("h2",{id:"include-or-exclude-tests"},"Include or exclude tests"),(0,a.kt)("p",null,"Features, scenarios or examples can be included or excluded for a test run. For example, to run tests that are tagged with ",(0,a.kt)("inlineCode",{parentName:"p"},"mobile")," but exclude tests that are tagged ",(0,a.kt)("inlineCode",{parentName:"p"},"iphone")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"LEFTEST_TAGS=mobile,^iphone npx playwright test\n")),(0,a.kt)("p",null,"All tests will run if no tags are specified."),(0,a.kt)("h2",{id:"extending-playwright-test-context"},"Extending Playwright test context"),(0,a.kt)("p",null,"To extend the test context, call ",(0,a.kt)("inlineCode",{parentName:"p"},"extendTest")," with an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"TestType")," and extend the ",(0,a.kt)("inlineCode",{parentName:"p"},"PlaywrightContext")," interface."),(0,a.kt)("p",null,"For example, to enable component testing for react, create a ",(0,a.kt)("inlineCode",{parentName:"p"},"support.ts")," file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { test } from "@playwright/experimental-ct-react"\nimport { extendTest } from "@antischematic/leftest-playwright"\n\nexport const createSteps = extendTest(test)\n')),(0,a.kt)("p",null,"Then use this to create your steps"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { createSteps } from "./support"\n\nconst steps = {\n   "I mount the component": async ({ mount }) => {\n      await mount(<App />)\n   }\n}\n\nexport default createSteps(steps)\n')))}d.isMDXComponent=!0}}]);