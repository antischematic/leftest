"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[294],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7046:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:4},o="Write a Custom Adapter",s={unversionedId:"adapters/custom",id:"adapters/custom",title:"Write a Custom Adapter",description:"This API is experimental.",source:"@site/docs/adapters/custom.md",sourceDirName:"adapters",slug:"/adapters/custom",permalink:"/leftest/docs/adapters/custom",draft:!1,editUrl:"https://github.com/antischematic/leftest/tree/main/packages/create-docusaurus/templates/shared/docs/adapters/custom.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Vitest",permalink:"/leftest/docs/adapters/vitest"},next:{title:"Comparison with Cucumber",permalink:"/leftest/docs/cucumber"}},p={},l=[{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2}],c={toc:l},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"write-a-custom-adapter"},"Write a Custom Adapter"),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"This API is experimental.")),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("p",null,"Install the core Leftest library."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm add @antischematic/leftest\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"Create an adapter for your testing library. This example uses Vitest."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n   createTestSuiteFactory,\n   setAdapter,\n   TestSuiteAdapter,\n   TestSuiteAdapterMetadata,\n   Flag,\n} from \"@antischematic/leftest\"\nimport { suite, test } from \"vitest\"\n\nexport class VitestAdapter implements TestSuiteAdapter {\n   isAsync = true\n\n   suite(name: string, impl: () => void, flag: Flag) {\n      switch (flag) {\n         case Flag.SKIP:\n            suite.skip(name, impl)\n            break\n         case Flag.ONLY:\n            suite.only(name, impl)\n            break\n         case Flag.DEFAULT:\n            suite(name, impl)\n      }\n   }\n\n   test(name: string, impl: () => void, { flag }: TestSuiteAdapterMetadata): void {\n      switch (flag) {\n         case Flag.SKIP:\n            test.skip(name, impl)\n            break\n         case Flag.ONLY:\n            test.only(name, impl)\n            break\n         case Flag.DEFAULT:\n            test(name, impl)\n      }\n   }\n\n   step(name: string, description: string, impl: () => void): void {\n      console.log(name, description)\n      impl()\n   }\n\n   beforeScenario(impl: () => void): void {\n      console.log('before scenario')\n      impl()\n   }\n\n   afterScenario(impl: () => void): void {\n      console.log('after scenario')\n      impl()\n   }\n\n   beforeStep(impl: () => void): void {\n      console.log('before step')\n      impl()\n   }\n\n   afterStep(impl: () => void): void {\n      console.log('after step')\n      impl()\n   }\n}\n\nsetAdapter(new VitestAdapter())\n")),(0,a.kt)("p",null,"Then import the adapter into your test suite."))}m.isMDXComponent=!0}}]);