"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[506],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>g});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),l=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=l(a),d=r,g=u["".concat(p,".").concat(d)]||u[d]||c[d]||s;return a?n.createElement(g,i(i({ref:t},m),{},{components:a})):n.createElement(g,i({ref:t},m))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},4117:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var n=a(7462),r=(a(7294),a(3905));const s={sidebar_position:3},i="Steps",o={unversionedId:"guide/steps",id:"guide/steps",title:"Steps",description:"This API is stable.",source:"@site/docs/guide/steps.md",sourceDirName:"guide",slug:"/guide/steps",permalink:"/leftest/docs/guide/steps",draft:!1,editUrl:"https://github.com/antischematic/leftest/tree/main/packages/create-docusaurus/templates/shared/docs/guide/steps.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Features",permalink:"/leftest/docs/guide/features"},next:{title:"Context",permalink:"/leftest/docs/guide/context"}},p={},l=[{value:"Add a basic step",id:"add-a-basic-step",level:2},{value:"Add a parameterised step",id:"add-a-parameterised-step",level:2},{value:"Passing in parameters",id:"passing-in-parameters",level:3},{value:"Using inline parameters",id:"using-inline-parameters",level:3},{value:"Passing in parameters through examples",id:"passing-in-parameters-through-examples",level:3},{value:"Using an alias",id:"using-an-alias",level:3},{value:"Common steps",id:"common-steps",level:2}],m={toc:l},u="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"steps"},"Steps"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This API is stable.")),(0,r.kt)("p",null,"The step file should be initially created as an empty object. As you work on features you will implement each step here. These should match the steps defined by ",(0,r.kt)("inlineCode",{parentName:"p"},"given"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"when"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"then"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"and")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"but")," methods in the feature file."),(0,r.kt)("h2",{id:"add-a-basic-step"},"Add a basic step"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export default {\n   'the Maker starts a game': () => {\n      console.log('Maker started the game')\n   }\n}\n")),(0,r.kt)("p",null,"The implementation details of the step are test framework specific. It is up to you to decide what each step does."),(0,r.kt)("h2",{id:"add-a-parameterised-step"},"Add a parameterised step"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export default {\n   'I eat <eat> cucumbers': (amount: number) => {\n      console.log(`I ate ${amount} cucumbers`)\n   }\n}\n")),(0,r.kt)("p",null,"Steps are parameterised using angle brackets ",(0,r.kt)("inlineCode",{parentName:"p"},"<>")," to delimit the name of the variable. There are multiple ways to use a parameterised step."),(0,r.kt)("h3",{id:"passing-in-parameters"},"Passing in parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"when('I eat <eat> cucumbers', 10) \n")),(0,r.kt)("h3",{id:"using-inline-parameters"},"Using inline parameters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"when('I eat [10] cucumbers') // 10 is parsed as a number\nwhen('I eat \"10\" cucumbers') // 10 is parsed as a string\n")),(0,r.kt)("p",null,"Parameters are parsed as strings when delimited with single or double quotes ",(0,r.kt)("inlineCode",{parentName:"p"},'""')," or ",(0,r.kt)("inlineCode",{parentName:"p"},"''"),", and as literal values when delimited with square brackets ",(0,r.kt)("inlineCode",{parentName:"p"},"[]"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Inline parameters make it harder to locate the step implementation.")),(0,r.kt)("h3",{id:"passing-in-parameters-through-examples"},"Passing in parameters through examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"when('I eat <eat> cucumbers')\nexamples([\n   { eat: 5 },\n   { eat: 10 },\n]) \n")),(0,r.kt)("h3",{id:"using-an-alias"},"Using an alias"),(0,r.kt)("p",null,"To avoid naming conflicts, parameters can be renamed with an alias."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Aliased parameters are not type checked when used with ",(0,r.kt)("inlineCode",{parentName:"p"},"examples"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"when('I eat <munch> cucumbers')\nexamples([\n   { munch: 5 },\n   { munch: 10 },\n]) \n")),(0,r.kt)("h2",{id:"common-steps"},"Common steps"),(0,r.kt)("p",null,"Steps for common operations like user authentication or page navigation can be extracted into a common steps file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"export default {\n   'I login with <username> and <password>': (username: string, password: string) => {\n      console.log('login:', username, password)\n   },\n   'I visit <page>': (page: string) => {\n      console.log('visit:', page)\n   }\n}\n")),(0,r.kt)("p",null,"Steps can be easily combined using the spread operator."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import commonSteps from \"./common\"\n\nexport default {\n   ...commonSteps,\n   'the Maker starts a game': () => {\n      console.log('Maker started the game')\n   }\n}\n")))}c.isMDXComponent=!0}}]);